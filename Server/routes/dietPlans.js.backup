const express = require("express");
const router = express.Router();
const pool = require("../config/db");
const { authenticateToken } = require("../middleware/auth");

// Get all diet plans for a user
router.get("/", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;

    const result = await pool.query(
      `SELECT dp.*, 
              COUNT(dpi.item_id) as item_count,
              SUM(dpi.calories) as total_calories
       FROM diet_plans dp
       LEFT JOIN diet_plan_items dpi ON dp.plan_id = dpi.plan_id
       WHERE dp.user_id = $1
       GROUP BY dp.plan_id
       ORDER BY dp.created_at DESC`,
      [userId]
    );

    res.json({
      success: true,
      plans: result.rows,
    });
  } catch (error) {
    console.error("Error fetching diet plans:", error);
    res.status(500).json({
      success: false,
      message: "Error fetching diet plans",
    });
  }
});

// Get recent diet plans (last 3)
router.get("/recent", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;

    const result = await pool.query(
      `SELECT dp.*, 
              COUNT(dpi.item_id) as item_count,
              SUM(dpi.calories) as total_calories
       FROM diet_plans dp
       LEFT JOIN diet_plan_items dpi ON dp.plan_id = dpi.plan_id
       WHERE dp.user_id = $1
       GROUP BY dp.plan_id
       ORDER BY dp.created_at DESC
       LIMIT 3`,
      [userId]
    );

    res.json({
      success: true,
      plans: result.rows,
    });
  } catch (error) {
    console.error("Error fetching recent diet plans:", error);
    res.status(500).json({
      success: false,
      message: "Error fetching recent diet plans",
    });
  }
});

// Get a specific diet plan with items
router.get("/:planId", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const planId = req.params.planId;

    // Get diet plan
    const planResult = await pool.query(
      "SELECT * FROM Diet_Plans WHERE plan_id = $1 AND user_id = $2",
      [planId, userId]
    );

    if (planResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan not found",
      });
    }

    // Get diet plan items
    const itemsResult = await pool.query(
      `SELECT dpi.*, f.food_name, f.calories_per_100g, f.protein_per_100g, 
              f.carbs_per_100g, f.fats_per_100g, p.product_name
       FROM Diet_Plan_Items dpi
       LEFT JOIN Food f ON dpi.food_id = f.food_id
       LEFT JOIN Products p ON dpi.product_id = p.product_id
       WHERE dpi.plan_id = $1
       ORDER BY dpi.meal_time, dpi.item_id`,
      [planId]
    );

    res.json({
      success: true,
      plan: planResult.rows[0],
      items: itemsResult.rows,
    });
  } catch (error) {
    console.error("Error fetching diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error fetching diet plan",
    });
  }
});

// Create a new diet plan
router.post("/", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const { planName, startDate, endDate, items } = req.body;

    if (!planName) {
      return res.status(400).json({
        success: false,
        message: "Plan name is required",
      });
    }

    // Start transaction
    const client = await pool.connect();
    try {
      await client.query("BEGIN");

      // Create diet plan
      const planResult = await client.query(
        "INSERT INTO Diet_Plans (user_id, plan_name, start_date, end_date) VALUES ($1, $2, $3, $4) RETURNING *",
        [userId, planName, startDate || null, endDate || null]
      );

      const planId = planResult.rows[0].plan_id;

      // Add diet plan items if provided
      if (items && items.length > 0) {
        for (const item of items) {
          await client.query(
            "INSERT INTO Diet_Plan_Items (plan_id, food_id, product_id, meal_time, quantity, calories) VALUES ($1, $2, $3, $4, $5, $6)",
            [
              planId,
              item.food_id || null,
              item.product_id || null,
              item.meal_time,
              item.quantity,
              item.calories,
            ]
          );
        }
      }

      await client.query("COMMIT");

      res.status(201).json({
        success: true,
        message: "Diet plan created successfully",
        plan: planResult.rows[0],
      });
    } catch (error) {
      await client.query("ROLLBACK");
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Error creating diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error creating diet plan",
    });
  }
});

// Update a diet plan
router.put("/:planId", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const planId = req.params.planId;
    const { planName, startDate, endDate } = req.body;

    const result = await pool.query(
      "UPDATE Diet_Plans SET plan_name = $1, start_date = $2, end_date = $3 WHERE plan_id = $4 AND user_id = $5 RETURNING *",
      [planName, startDate || null, endDate || null, planId, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan not found",
      });
    }

    res.json({
      success: true,
      message: "Diet plan updated successfully",
      plan: result.rows[0],
    });
  } catch (error) {
    console.error("Error updating diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error updating diet plan",
    });
  }
});

// Delete a diet plan
router.delete("/:planId", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const planId = req.params.planId;

    const result = await pool.query(
      "DELETE FROM Diet_Plans WHERE plan_id = $1 AND user_id = $2 RETURNING *",
      [planId, userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan not found",
      });
    }

    res.json({
      success: true,
      message: "Diet plan deleted successfully",
    });
  } catch (error) {
    console.error("Error deleting diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error deleting diet plan",
    });
  }
});

// Add item to diet plan
router.post("/:planId/items", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const planId = req.params.planId;
    const { food_id, product_id, meal_time, quantity, calories } = req.body;

    // Verify plan belongs to user
    const planCheck = await pool.query(
      "SELECT plan_id FROM Diet_Plans WHERE plan_id = $1 AND user_id = $2",
      [planId, userId]
    );

    if (planCheck.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan not found",
      });
    }

    const result = await pool.query(
      "INSERT INTO Diet_Plan_Items (plan_id, food_id, product_id, meal_time, quantity, calories) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *",
      [
        planId,
        food_id || null,
        product_id || null,
        meal_time,
        quantity,
        calories,
      ]
    );

    res.status(201).json({
      success: true,
      message: "Item added to diet plan successfully",
      item: result.rows[0],
    });
  } catch (error) {
    console.error("Error adding item to diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error adding item to diet plan",
    });
  }
});

// Remove item from diet plan
router.delete("/:planId/items/:itemId", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.userId;
    const planId = req.params.planId;
    const itemId = req.params.itemId;

    // Verify plan belongs to user
    const planCheck = await pool.query(
      "SELECT plan_id FROM Diet_Plans WHERE plan_id = $1 AND user_id = $2",
      [planId, userId]
    );

    if (planCheck.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan not found",
      });
    }

    const result = await pool.query(
      "DELETE FROM diet_plan_items WHERE item_id = $1 AND plan_id = $2 RETURNING *",
      [itemId, planId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Diet plan item not found",
      });
    }

    res.json({
      success: true,
      message: "Item removed from diet plan successfully",
    });
  } catch (error) {
    console.error("Error removing item from diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error removing item from diet plan",
    });
  }
});

// AI Diet Plan generation is now handled on the frontend using Gemini API directly
// This avoids backend complexity and API key management issues

module.exports = router;
    const userId = req.user.userId;
    const { goals, dietType, restrictions, targetCalories, duration = 7 } = req.body;

    // Get user profile for personalization
    const userQuery = await pool.query(
      'SELECT username FROM users WHERE user_id = $1',
      [userId]
    );

    if (userQuery.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'User not found'
      });
    }

    const user = userQuery.rows[0];
    let aiResponse;

    // Create AI prompt for Gemini
    const prompt = `Create a personalized ${duration}-day diet plan for a user with these preferences:
- Goals: ${goals || 'general health'}
- Diet Type: ${dietType || 'balanced'}
- Dietary Restrictions: ${restrictions || 'none'}
- Target Daily Calories: ${targetCalories || 2000}

Please respond with ONLY a valid JSON object in this exact format:
{
  "planName": "Descriptive plan name",
  "description": "Brief plan description",
  "meals": [
    {
      "day": 1,
      "breakfast": [{"food": "food name", "quantity": "amount", "calories": 300}],
      "lunch": [{"food": "food name", "quantity": "amount", "calories": 400}],
      "snack": [{"food": "food name", "quantity": "amount", "calories": 150}],
      "dinner": [{"food": "food name", "quantity": "amount", "calories": 500}]
    }
  ]
}

Make it realistic and healthy. Include only the JSON, no other text.`;

    try {
      // Try to use Gemini API if available
      if (process.env.GEMINI_API_KEY) {
        const { GoogleGenerativeAI } = require('@google/generative-ai');
        const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
        const model = genAI.getGenerativeModel({ model: 'gemini-pro' });
        
        console.log('Generating AI diet plan with Gemini...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        const text = response.text();
        
        console.log('Gemini raw response:', text);
        
        // Clean up the response to extract JSON
        const cleanText = text.replace(/```json|```/g, '').trim();
        const jsonMatch = cleanText.match(/\{[\s\S]*\}/);
        
        if (jsonMatch) {
          try {
            aiResponse = JSON.parse(jsonMatch[0]);
            console.log('Parsed AI response successfully');
          } catch (parseError) {
            console.log('JSON parse error, using fallback');
            throw new Error('Invalid JSON from AI');
          }
        } else {
          throw new Error('No valid JSON found in AI response');
        }
      } else {
        console.log('No Gemini API key found, using fallback');
        throw new Error('Gemini API key not configured');
      }
    } catch (aiError) {
      console.log('AI generation failed, using fallback:', aiError.message);
      
      // Fallback to a pre-defined healthy plan
      aiResponse = {
        planName: `Smart ${goals || 'Health'} Plan - ${duration} Days`,
        description: `A balanced ${duration}-day meal plan designed for ${goals || 'general health'} with ${targetCalories || 2000} daily calories`,
        meals: []
      };

      // Generate sample meals for each day
      const sampleMeals = [
        {
          breakfast: [
            { food: 'Oatmeal with fresh berries', quantity: '1 bowl (200g)', calories: 320 },
            { food: 'Almond milk', quantity: '1 cup', calories: 40 }
          ],
          lunch: [
            { food: 'Grilled chicken salad', quantity: '1 serving (300g)', calories: 450 },
            { food: 'Olive oil dressing', quantity: '1 tbsp', calories: 120 }
          ],
          snack: [
            { food: 'Mixed nuts and seeds', quantity: '30g', calories: 180 }
          ],
          dinner: [
            { food: 'Baked salmon fillet', quantity: '150g', calories: 350 },
            { food: 'Steamed broccoli', quantity: '1 cup', calories: 55 },
            { food: 'Quinoa', quantity: '1/2 cup cooked', calories: 110 }
          ]
        },
        {
          breakfast: [
            { food: 'Greek yogurt parfait', quantity: '200g', calories: 280 },
            { food: 'Granola', quantity: '30g', calories: 150 }
          ],
          lunch: [
            { food: 'Turkey and avocado wrap', quantity: '1 large wrap', calories: 520 }
          ],
          snack: [
            { food: 'Apple with peanut butter', quantity: '1 medium apple + 1 tbsp PB', calories: 190 }
          ],
          dinner: [
            { food: 'Lean beef stir-fry', quantity: '200g beef + vegetables', calories: 400 },
            { food: 'Brown rice', quantity: '1/2 cup cooked', calories: 110 }
          ]
        }
      ];

      for (let day = 1; day <= duration; day++) {
        const mealTemplate = sampleMeals[(day - 1) % sampleMeals.length];
        aiResponse.meals.push({
          day: day,
          ...mealTemplate
        });
      }
    }

    // Create the plan in database
    const client = await pool.connect();
    try {
      await client.query("BEGIN");

      const planResult = await client.query(
        "INSERT INTO diet_plans (user_id, plan_name, start_date, end_date) VALUES ($1, $2, $3, $4) RETURNING *",
        [
          userId, 
          aiResponse.planName, 
          new Date().toISOString().split('T')[0],
          new Date(Date.now() + (duration * 24 * 60 * 60 * 1000)).toISOString().split('T')[0]
        ]
      );

      const planId = planResult.rows[0].plan_id;

      // Insert meals as plan items
      for (const dayMeal of aiResponse.meals) {
        const mealTypes = ['breakfast', 'lunch', 'snack', 'dinner'];
        
        for (const mealType of mealTypes) {
          const mealItems = dayMeal[mealType] || [];
          
          for (const item of mealItems) {
            await client.query(
              "INSERT INTO diet_plan_items (plan_id, meal_time, quantity, calories) VALUES ($1, $2, $3, $4)",
              [
                planId, 
                mealType.charAt(0).toUpperCase() + mealType.slice(1),
                `${item.food} - ${item.quantity}`,
                item.calories
              ]
            );
          }
        }
      }

      await client.query("COMMIT");

      res.status(201).json({
        success: true,
        message: "AI diet plan generated successfully",
        plan: {
          ...planResult.rows[0],
          description: aiResponse.description,
          aiGenerated: true
        },
        fullPlan: aiResponse
      });
    } catch (error) {
      await client.query("ROLLBACK");
      throw error;
    } finally {
      client.release();
    }
  } catch (error) {
    console.error("Error generating AI diet plan:", error);
    res.status(500).json({
      success: false,
      message: "Error generating AI diet plan: " + error.message
    });
  }
});

module.exports = router;
